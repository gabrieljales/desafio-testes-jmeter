/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 226745.0, "series": [{"data": [[0.0, 2.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 9.0], [5.3, 9.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 9.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 14.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 16.0], [9.2, 16.0], [9.3, 16.0], [9.4, 16.0], [9.5, 16.0], [9.6, 17.0], [9.7, 17.0], [9.8, 17.0], [9.9, 17.0], [10.0, 18.0], [10.1, 18.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 19.0], [10.6, 19.0], [10.7, 19.0], [10.8, 19.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 21.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 24.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 25.0], [13.0, 25.0], [13.1, 25.0], [13.2, 25.0], [13.3, 26.0], [13.4, 26.0], [13.5, 26.0], [13.6, 26.0], [13.7, 27.0], [13.8, 27.0], [13.9, 27.0], [14.0, 28.0], [14.1, 28.0], [14.2, 28.0], [14.3, 29.0], [14.4, 29.0], [14.5, 29.0], [14.6, 29.0], [14.7, 30.0], [14.8, 30.0], [14.9, 30.0], [15.0, 31.0], [15.1, 31.0], [15.2, 31.0], [15.3, 32.0], [15.4, 32.0], [15.5, 32.0], [15.6, 32.0], [15.7, 33.0], [15.8, 33.0], [15.9, 33.0], [16.0, 34.0], [16.1, 34.0], [16.2, 34.0], [16.3, 35.0], [16.4, 35.0], [16.5, 35.0], [16.6, 36.0], [16.7, 36.0], [16.8, 36.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 38.0], [17.3, 38.0], [17.4, 38.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 40.0], [17.9, 40.0], [18.0, 40.0], [18.1, 41.0], [18.2, 41.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 43.0], [18.7, 43.0], [18.8, 43.0], [18.9, 44.0], [19.0, 44.0], [19.1, 44.0], [19.2, 45.0], [19.3, 45.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 47.0], [19.8, 47.0], [19.9, 48.0], [20.0, 48.0], [20.1, 48.0], [20.2, 49.0], [20.3, 49.0], [20.4, 49.0], [20.5, 50.0], [20.6, 50.0], [20.7, 51.0], [20.8, 51.0], [20.9, 51.0], [21.0, 52.0], [21.1, 52.0], [21.2, 53.0], [21.3, 53.0], [21.4, 53.0], [21.5, 54.0], [21.6, 54.0], [21.7, 55.0], [21.8, 55.0], [21.9, 56.0], [22.0, 56.0], [22.1, 56.0], [22.2, 57.0], [22.3, 57.0], [22.4, 58.0], [22.5, 58.0], [22.6, 59.0], [22.7, 59.0], [22.8, 60.0], [22.9, 60.0], [23.0, 60.0], [23.1, 61.0], [23.2, 61.0], [23.3, 62.0], [23.4, 62.0], [23.5, 63.0], [23.6, 63.0], [23.7, 64.0], [23.8, 64.0], [23.9, 65.0], [24.0, 65.0], [24.1, 65.0], [24.2, 66.0], [24.3, 66.0], [24.4, 67.0], [24.5, 67.0], [24.6, 68.0], [24.7, 68.0], [24.8, 69.0], [24.9, 69.0], [25.0, 70.0], [25.1, 70.0], [25.2, 71.0], [25.3, 71.0], [25.4, 72.0], [25.5, 72.0], [25.6, 73.0], [25.7, 73.0], [25.8, 74.0], [25.9, 74.0], [26.0, 75.0], [26.1, 75.0], [26.2, 76.0], [26.3, 76.0], [26.4, 77.0], [26.5, 77.0], [26.6, 78.0], [26.7, 78.0], [26.8, 79.0], [26.9, 79.0], [27.0, 80.0], [27.1, 80.0], [27.2, 81.0], [27.3, 81.0], [27.4, 82.0], [27.5, 83.0], [27.6, 83.0], [27.7, 84.0], [27.8, 84.0], [27.9, 85.0], [28.0, 85.0], [28.1, 86.0], [28.2, 86.0], [28.3, 87.0], [28.4, 88.0], [28.5, 88.0], [28.6, 89.0], [28.7, 89.0], [28.8, 90.0], [28.9, 90.0], [29.0, 91.0], [29.1, 92.0], [29.2, 92.0], [29.3, 93.0], [29.4, 93.0], [29.5, 94.0], [29.6, 95.0], [29.7, 95.0], [29.8, 96.0], [29.9, 97.0], [30.0, 97.0], [30.1, 98.0], [30.2, 99.0], [30.3, 99.0], [30.4, 100.0], [30.5, 100.0], [30.6, 101.0], [30.7, 102.0], [30.8, 102.0], [30.9, 103.0], [31.0, 104.0], [31.1, 104.0], [31.2, 105.0], [31.3, 106.0], [31.4, 106.0], [31.5, 107.0], [31.6, 108.0], [31.7, 108.0], [31.8, 109.0], [31.9, 110.0], [32.0, 111.0], [32.1, 111.0], [32.2, 112.0], [32.3, 113.0], [32.4, 113.0], [32.5, 114.0], [32.6, 115.0], [32.7, 116.0], [32.8, 116.0], [32.9, 117.0], [33.0, 118.0], [33.1, 118.0], [33.2, 119.0], [33.3, 120.0], [33.4, 121.0], [33.5, 122.0], [33.6, 122.0], [33.7, 123.0], [33.8, 124.0], [33.9, 125.0], [34.0, 126.0], [34.1, 126.0], [34.2, 127.0], [34.3, 128.0], [34.4, 129.0], [34.5, 130.0], [34.6, 131.0], [34.7, 132.0], [34.8, 132.0], [34.9, 133.0], [35.0, 134.0], [35.1, 135.0], [35.2, 136.0], [35.3, 137.0], [35.4, 138.0], [35.5, 139.0], [35.6, 140.0], [35.7, 141.0], [35.8, 141.0], [35.9, 142.0], [36.0, 143.0], [36.1, 144.0], [36.2, 145.0], [36.3, 146.0], [36.4, 148.0], [36.5, 148.0], [36.6, 150.0], [36.7, 151.0], [36.8, 152.0], [36.9, 153.0], [37.0, 154.0], [37.1, 155.0], [37.2, 156.0], [37.3, 157.0], [37.4, 158.0], [37.5, 159.0], [37.6, 160.0], [37.7, 162.0], [37.8, 163.0], [37.9, 164.0], [38.0, 165.0], [38.1, 166.0], [38.2, 167.0], [38.3, 168.0], [38.4, 170.0], [38.5, 171.0], [38.6, 172.0], [38.7, 174.0], [38.8, 175.0], [38.9, 176.0], [39.0, 178.0], [39.1, 179.0], [39.2, 181.0], [39.3, 182.0], [39.4, 184.0], [39.5, 185.0], [39.6, 186.0], [39.7, 188.0], [39.8, 189.0], [39.9, 191.0], [40.0, 192.0], [40.1, 193.0], [40.2, 194.0], [40.3, 195.0], [40.4, 196.0], [40.5, 196.0], [40.6, 197.0], [40.7, 198.0], [40.8, 198.0], [40.9, 199.0], [41.0, 199.0], [41.1, 200.0], [41.2, 200.0], [41.3, 201.0], [41.4, 201.0], [41.5, 201.0], [41.6, 202.0], [41.7, 202.0], [41.8, 203.0], [41.9, 203.0], [42.0, 203.0], [42.1, 204.0], [42.2, 204.0], [42.3, 204.0], [42.4, 204.0], [42.5, 205.0], [42.6, 205.0], [42.7, 205.0], [42.8, 206.0], [42.9, 206.0], [43.0, 206.0], [43.1, 207.0], [43.2, 207.0], [43.3, 207.0], [43.4, 208.0], [43.5, 208.0], [43.6, 208.0], [43.7, 208.0], [43.8, 209.0], [43.9, 209.0], [44.0, 209.0], [44.1, 210.0], [44.2, 210.0], [44.3, 210.0], [44.4, 210.0], [44.5, 211.0], [44.6, 211.0], [44.7, 211.0], [44.8, 212.0], [44.9, 212.0], [45.0, 212.0], [45.1, 213.0], [45.2, 213.0], [45.3, 213.0], [45.4, 214.0], [45.5, 214.0], [45.6, 214.0], [45.7, 215.0], [45.8, 215.0], [45.9, 215.0], [46.0, 215.0], [46.1, 216.0], [46.2, 216.0], [46.3, 216.0], [46.4, 217.0], [46.5, 217.0], [46.6, 218.0], [46.7, 218.0], [46.8, 218.0], [46.9, 219.0], [47.0, 219.0], [47.1, 219.0], [47.2, 220.0], [47.3, 220.0], [47.4, 220.0], [47.5, 221.0], [47.6, 221.0], [47.7, 222.0], [47.8, 222.0], [47.9, 222.0], [48.0, 223.0], [48.1, 223.0], [48.2, 224.0], [48.3, 224.0], [48.4, 225.0], [48.5, 225.0], [48.6, 225.0], [48.7, 226.0], [48.8, 226.0], [48.9, 227.0], [49.0, 227.0], [49.1, 228.0], [49.2, 228.0], [49.3, 229.0], [49.4, 229.0], [49.5, 230.0], [49.6, 231.0], [49.7, 231.0], [49.8, 232.0], [49.9, 232.0], [50.0, 233.0], [50.1, 233.0], [50.2, 234.0], [50.3, 234.0], [50.4, 235.0], [50.5, 236.0], [50.6, 236.0], [50.7, 237.0], [50.8, 237.0], [50.9, 238.0], [51.0, 239.0], [51.1, 239.0], [51.2, 240.0], [51.3, 240.0], [51.4, 241.0], [51.5, 242.0], [51.6, 242.0], [51.7, 243.0], [51.8, 244.0], [51.9, 244.0], [52.0, 245.0], [52.1, 246.0], [52.2, 246.0], [52.3, 247.0], [52.4, 247.0], [52.5, 248.0], [52.6, 249.0], [52.7, 249.0], [52.8, 250.0], [52.9, 251.0], [53.0, 251.0], [53.1, 252.0], [53.2, 253.0], [53.3, 254.0], [53.4, 254.0], [53.5, 255.0], [53.6, 256.0], [53.7, 257.0], [53.8, 257.0], [53.9, 258.0], [54.0, 259.0], [54.1, 260.0], [54.2, 260.0], [54.3, 261.0], [54.4, 262.0], [54.5, 263.0], [54.6, 263.0], [54.7, 264.0], [54.8, 265.0], [54.9, 266.0], [55.0, 266.0], [55.1, 267.0], [55.2, 268.0], [55.3, 269.0], [55.4, 269.0], [55.5, 270.0], [55.6, 271.0], [55.7, 272.0], [55.8, 272.0], [55.9, 273.0], [56.0, 274.0], [56.1, 275.0], [56.2, 275.0], [56.3, 276.0], [56.4, 277.0], [56.5, 278.0], [56.6, 278.0], [56.7, 279.0], [56.8, 280.0], [56.9, 280.0], [57.0, 281.0], [57.1, 282.0], [57.2, 283.0], [57.3, 283.0], [57.4, 284.0], [57.5, 285.0], [57.6, 285.0], [57.7, 286.0], [57.8, 287.0], [57.9, 288.0], [58.0, 288.0], [58.1, 289.0], [58.2, 290.0], [58.3, 291.0], [58.4, 292.0], [58.5, 293.0], [58.6, 294.0], [58.7, 294.0], [58.8, 295.0], [58.9, 296.0], [59.0, 297.0], [59.1, 298.0], [59.2, 299.0], [59.3, 300.0], [59.4, 301.0], [59.5, 302.0], [59.6, 303.0], [59.7, 304.0], [59.8, 305.0], [59.9, 306.0], [60.0, 307.0], [60.1, 308.0], [60.2, 309.0], [60.3, 310.0], [60.4, 311.0], [60.5, 312.0], [60.6, 313.0], [60.7, 314.0], [60.8, 315.0], [60.9, 316.0], [61.0, 317.0], [61.1, 318.0], [61.2, 319.0], [61.3, 320.0], [61.4, 321.0], [61.5, 322.0], [61.6, 322.0], [61.7, 323.0], [61.8, 324.0], [61.9, 325.0], [62.0, 326.0], [62.1, 327.0], [62.2, 328.0], [62.3, 329.0], [62.4, 329.0], [62.5, 330.0], [62.6, 331.0], [62.7, 332.0], [62.8, 333.0], [62.9, 334.0], [63.0, 335.0], [63.1, 336.0], [63.2, 337.0], [63.3, 338.0], [63.4, 339.0], [63.5, 340.0], [63.6, 340.0], [63.7, 341.0], [63.8, 342.0], [63.9, 343.0], [64.0, 344.0], [64.1, 346.0], [64.2, 346.0], [64.3, 347.0], [64.4, 348.0], [64.5, 349.0], [64.6, 350.0], [64.7, 351.0], [64.8, 352.0], [64.9, 353.0], [65.0, 354.0], [65.1, 355.0], [65.2, 356.0], [65.3, 357.0], [65.4, 358.0], [65.5, 359.0], [65.6, 360.0], [65.7, 361.0], [65.8, 362.0], [65.9, 363.0], [66.0, 364.0], [66.1, 365.0], [66.2, 366.0], [66.3, 367.0], [66.4, 368.0], [66.5, 369.0], [66.6, 370.0], [66.7, 371.0], [66.8, 372.0], [66.9, 373.0], [67.0, 374.0], [67.1, 375.0], [67.2, 376.0], [67.3, 377.0], [67.4, 378.0], [67.5, 379.0], [67.6, 380.0], [67.7, 381.0], [67.8, 382.0], [67.9, 383.0], [68.0, 384.0], [68.1, 385.0], [68.2, 385.0], [68.3, 386.0], [68.4, 387.0], [68.5, 388.0], [68.6, 389.0], [68.7, 390.0], [68.8, 391.0], [68.9, 392.0], [69.0, 393.0], [69.1, 394.0], [69.2, 395.0], [69.3, 396.0], [69.4, 396.0], [69.5, 397.0], [69.6, 398.0], [69.7, 399.0], [69.8, 400.0], [69.9, 401.0], [70.0, 402.0], [70.1, 403.0], [70.2, 403.0], [70.3, 404.0], [70.4, 405.0], [70.5, 406.0], [70.6, 407.0], [70.7, 408.0], [70.8, 409.0], [70.9, 409.0], [71.0, 410.0], [71.1, 411.0], [71.2, 412.0], [71.3, 413.0], [71.4, 414.0], [71.5, 415.0], [71.6, 416.0], [71.7, 417.0], [71.8, 417.0], [71.9, 418.0], [72.0, 419.0], [72.1, 420.0], [72.2, 421.0], [72.3, 422.0], [72.4, 423.0], [72.5, 424.0], [72.6, 425.0], [72.7, 426.0], [72.8, 427.0], [72.9, 428.0], [73.0, 429.0], [73.1, 429.0], [73.2, 430.0], [73.3, 431.0], [73.4, 433.0], [73.5, 434.0], [73.6, 434.0], [73.7, 435.0], [73.8, 436.0], [73.9, 437.0], [74.0, 438.0], [74.1, 439.0], [74.2, 440.0], [74.3, 441.0], [74.4, 442.0], [74.5, 443.0], [74.6, 444.0], [74.7, 445.0], [74.8, 446.0], [74.9, 447.0], [75.0, 448.0], [75.1, 449.0], [75.2, 449.0], [75.3, 450.0], [75.4, 451.0], [75.5, 452.0], [75.6, 453.0], [75.7, 454.0], [75.8, 455.0], [75.9, 456.0], [76.0, 457.0], [76.1, 458.0], [76.2, 459.0], [76.3, 459.0], [76.4, 460.0], [76.5, 461.0], [76.6, 462.0], [76.7, 463.0], [76.8, 464.0], [76.9, 465.0], [77.0, 466.0], [77.1, 467.0], [77.2, 468.0], [77.3, 469.0], [77.4, 470.0], [77.5, 471.0], [77.6, 472.0], [77.7, 473.0], [77.8, 474.0], [77.9, 475.0], [78.0, 476.0], [78.1, 477.0], [78.2, 478.0], [78.3, 479.0], [78.4, 480.0], [78.5, 481.0], [78.6, 482.0], [78.7, 483.0], [78.8, 484.0], [78.9, 485.0], [79.0, 486.0], [79.1, 486.0], [79.2, 487.0], [79.3, 488.0], [79.4, 489.0], [79.5, 490.0], [79.6, 491.0], [79.7, 492.0], [79.8, 493.0], [79.9, 494.0], [80.0, 495.0], [80.1, 496.0], [80.2, 497.0], [80.3, 498.0], [80.4, 499.0], [80.5, 500.0], [80.6, 501.0], [80.7, 502.0], [80.8, 503.0], [80.9, 504.0], [81.0, 504.0], [81.1, 505.0], [81.2, 506.0], [81.3, 507.0], [81.4, 508.0], [81.5, 509.0], [81.6, 510.0], [81.7, 511.0], [81.8, 513.0], [81.9, 514.0], [82.0, 515.0], [82.1, 516.0], [82.2, 517.0], [82.3, 518.0], [82.4, 519.0], [82.5, 520.0], [82.6, 521.0], [82.7, 522.0], [82.8, 523.0], [82.9, 524.0], [83.0, 525.0], [83.1, 527.0], [83.2, 528.0], [83.3, 529.0], [83.4, 530.0], [83.5, 532.0], [83.6, 533.0], [83.7, 534.0], [83.8, 535.0], [83.9, 537.0], [84.0, 538.0], [84.1, 539.0], [84.2, 541.0], [84.3, 542.0], [84.4, 543.0], [84.5, 545.0], [84.6, 546.0], [84.7, 547.0], [84.8, 549.0], [84.9, 550.0], [85.0, 552.0], [85.1, 553.0], [85.2, 554.0], [85.3, 556.0], [85.4, 557.0], [85.5, 559.0], [85.6, 560.0], [85.7, 561.0], [85.8, 563.0], [85.9, 564.0], [86.0, 566.0], [86.1, 567.0], [86.2, 569.0], [86.3, 570.0], [86.4, 572.0], [86.5, 573.0], [86.6, 575.0], [86.7, 576.0], [86.8, 578.0], [86.9, 579.0], [87.0, 581.0], [87.1, 583.0], [87.2, 584.0], [87.3, 586.0], [87.4, 587.0], [87.5, 588.0], [87.6, 590.0], [87.7, 592.0], [87.8, 593.0], [87.9, 594.0], [88.0, 596.0], [88.1, 597.0], [88.2, 599.0], [88.3, 600.0], [88.4, 602.0], [88.5, 603.0], [88.6, 604.0], [88.7, 606.0], [88.8, 607.0], [88.9, 609.0], [89.0, 610.0], [89.1, 611.0], [89.2, 613.0], [89.3, 614.0], [89.4, 615.0], [89.5, 617.0], [89.6, 618.0], [89.7, 619.0], [89.8, 621.0], [89.9, 622.0], [90.0, 624.0], [90.1, 625.0], [90.2, 626.0], [90.3, 628.0], [90.4, 629.0], [90.5, 631.0], [90.6, 632.0], [90.7, 634.0], [90.8, 635.0], [90.9, 637.0], [91.0, 638.0], [91.1, 640.0], [91.2, 641.0], [91.3, 643.0], [91.4, 644.0], [91.5, 646.0], [91.6, 648.0], [91.7, 650.0], [91.8, 651.0], [91.9, 653.0], [92.0, 655.0], [92.1, 657.0], [92.2, 658.0], [92.3, 660.0], [92.4, 662.0], [92.5, 663.0], [92.6, 665.0], [92.7, 667.0], [92.8, 668.0], [92.9, 670.0], [93.0, 672.0], [93.1, 674.0], [93.2, 675.0], [93.3, 677.0], [93.4, 679.0], [93.5, 680.0], [93.6, 682.0], [93.7, 684.0], [93.8, 686.0], [93.9, 687.0], [94.0, 689.0], [94.1, 691.0], [94.2, 693.0], [94.3, 694.0], [94.4, 696.0], [94.5, 698.0], [94.6, 700.0], [94.7, 702.0], [94.8, 704.0], [94.9, 706.0], [95.0, 708.0], [95.1, 710.0], [95.2, 712.0], [95.3, 714.0], [95.4, 716.0], [95.5, 718.0], [95.6, 721.0], [95.7, 723.0], [95.8, 725.0], [95.9, 727.0], [96.0, 730.0], [96.1, 732.0], [96.2, 734.0], [96.3, 737.0], [96.4, 739.0], [96.5, 742.0], [96.6, 744.0], [96.7, 747.0], [96.8, 749.0], [96.9, 752.0], [97.0, 755.0], [97.1, 757.0], [97.2, 760.0], [97.3, 763.0], [97.4, 765.0], [97.5, 768.0], [97.6, 771.0], [97.7, 774.0], [97.8, 777.0], [97.9, 781.0], [98.0, 785.0], [98.1, 789.0], [98.2, 793.0], [98.3, 798.0], [98.4, 803.0], [98.5, 809.0], [98.6, 815.0], [98.7, 821.0], [98.8, 828.0], [98.9, 836.0], [99.0, 845.0], [99.1, 855.0], [99.2, 868.0], [99.3, 880.0], [99.4, 896.0], [99.5, 914.0], [99.6, 939.0], [99.7, 984.0], [99.8, 1063.0], [99.9, 1198.0]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 130048.0, "series": [{"data": [[0.0, 130048.0], [131200.0, 6.0], [139200.0, 1.0], [144400.0, 1.0], [600.0, 27152.0], [153600.0, 1.0], [148000.0, 1.0], [162800.0, 1.0], [163200.0, 1.0], [164800.0, 1.0], [170000.0, 2.0], [172000.0, 1.0], [700.0, 16053.0], [177600.0, 1.0], [190000.0, 2.0], [800.0, 4725.0], [204800.0, 1.0], [214400.0, 1.0], [900.0, 1269.0], [1000.0, 484.0], [1100.0, 277.0], [1200.0, 200.0], [1300.0, 98.0], [1400.0, 49.0], [1500.0, 7.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 1.0], [131300.0, 2.0], [131700.0, 1.0], [2300.0, 1.0], [140100.0, 1.0], [139700.0, 1.0], [148900.0, 1.0], [148500.0, 1.0], [173700.0, 1.0], [178900.0, 1.0], [206100.0, 1.0], [211700.0, 1.0], [214900.0, 1.0], [214500.0, 1.0], [4500.0, 1.0], [4800.0, 1.0], [130700.0, 2.0], [131800.0, 1.0], [137400.0, 1.0], [145400.0, 1.0], [161400.0, 1.0], [173000.0, 1.0], [181800.0, 1.0], [213000.0, 1.0], [100.0, 46011.0], [131500.0, 2.0], [145900.0, 1.0], [154700.0, 1.0], [147500.0, 1.0], [165500.0, 1.0], [163900.0, 1.0], [179100.0, 1.0], [193900.0, 1.0], [202700.0, 1.0], [200.0, 77972.0], [210300.0, 1.0], [226700.0, 1.0], [300.0, 45036.0], [400.0, 46054.0], [500.0, 33293.0], [130800.0, 1.0], [130600.0, 1.0], [129000.0, 1.0]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 226700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 199281.0, "series": [{"data": [[0.0, 148036.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 81446.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 37.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 199281.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.72816188E12, "maxY": 496.5512898742343, "series": [{"data": [[1.72816188E12, 12.710686359687212], [1.72816242E12, 137.13614706583024], [1.72816218E12, 432.0222645655216], [1.72816248E12, 20.7], [1.72816212E12, 342.2432366982633], [1.72816254E12, 9.583333333333332], [1.72816206E12, 252.97270407694955], [1.7281626E12, 2.0], [1.728162E12, 165.76085334924787], [1.7281623E12, 450.05912189506716], [1.72816194E12, 78.91344763478574], [1.72816236E12, 281.3097716357912], [1.72816224E12, 496.5512898742343]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7281626E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.481586402266295, "minX": 1.0, "maxY": 35959.8, "series": [{"data": [[2.0, 16698.666666666668], [3.0, 10057.800000000001], [4.0, 7501.75], [5.0, 6605.416666666668], [6.0, 5363.642857142857], [7.0, 212.06249999999997], [8.0, 7385.424999999999], [9.0, 3588.6976744186045], [10.0, 480.3877159309022], [11.0, 12123.29411764706], [12.0, 7109.684210526316], [13.0, 10784.85], [14.0, 9346.173913043478], [15.0, 5228.653846153846], [16.0, 8142.296296296296], [17.0, 8443.16], [18.0, 6076.4838709677415], [19.0, 4730.482758620689], [20.0, 214.38235294117646], [21.0, 12863.3], [22.0, 3653.8947368421054], [23.0, 4452.45], [24.0, 203.50000000000003], [25.0, 8179.452380952382], [26.0, 3506.512820512821], [27.0, 210.4888888888889], [28.0, 209.29166666666669], [29.0, 207.37777777777777], [30.0, 208.89795918367344], [31.0, 210.84444444444446], [32.0, 206.25454545454545], [33.0, 207.63157894736844], [34.0, 206.78431372549016], [35.0, 216.2142857142857], [36.0, 218.98076923076923], [37.0, 210.1803278688524], [38.0, 209.79661016949152], [39.0, 221.6166666666667], [40.0, 208.50843989769834], [41.0, 205.31818181818187], [42.0, 208.8985507246377], [43.0, 207.6486486486487], [44.0, 490.35217391304366], [45.0, 207.82608695652178], [46.0, 207.41666666666657], [47.0, 210.30379746835445], [48.0, 207.42105263157896], [49.0, 229.0588235294118], [50.0, 212.4871794871795], [51.0, 211.33333333333326], [52.0, 209.55421686746988], [53.0, 205.3103448275862], [54.0, 203.6489361702128], [55.0, 207.88235294117652], [56.0, 205.51111111111106], [57.0, 208.2584269662921], [58.0, 208.5894736842106], [59.0, 206.5368421052632], [60.0, 206.93548387096772], [61.0, 206.67000000000002], [62.0, 204.16666666666669], [63.0, 207.38541666666666], [64.0, 207.09183673469374], [65.0, 207.91666666666666], [66.0, 205.74774774774772], [67.0, 206.2211538461539], [68.0, 205.32692307692304], [69.0, 206.49557522123888], [70.0, 211.38388625592435], [71.0, 216.91893180734428], [72.0, 216.98113207547166], [73.0, 220.45045045045043], [74.0, 210.70535714285714], [75.0, 210.6890756302521], [76.0, 215.10434782608687], [77.0, 225.23140495867767], [78.0, 211.44628099173542], [79.0, 211.49166666666667], [80.0, 207.90769230769237], [81.0, 209.39682539682534], [82.0, 207.76642335766422], [83.0, 211.92241379310337], [84.0, 230.01562499999997], [85.0, 219.14999999999995], [86.0, 209.25517241379316], [87.0, 207.48529411764707], [88.0, 208.726618705036], [89.0, 207.46979865771812], [90.0, 206.36690647482024], [91.0, 205.72916666666674], [92.0, 208.52348993288592], [93.0, 210.19444444444443], [94.0, 207.02777777777789], [95.0, 211.0943396226416], [96.0, 228.75], [97.0, 248.6097060833902], [98.0, 214.53642384105962], [99.0, 208.888888888889], [100.0, 215.38045560996372], [101.0, 215.25490196078425], [102.0, 229.00000000000009], [103.0, 229.73417721518982], [104.0, 223.97260273972606], [105.0, 226.09554140127386], [106.0, 225.86184210526326], [107.0, 222.9523809523809], [108.0, 215.23749999999998], [109.0, 216.85365853658547], [110.0, 225.6975308641975], [111.0, 225.47727272727272], [112.0, 216.64417177914112], [113.0, 211.39153439153435], [114.0, 214.35555555555564], [115.0, 220.41618497109823], [116.0, 223.60810810810818], [117.0, 267.1666666666664], [118.0, 231.8211920529801], [119.0, 233.86021505376343], [120.0, 218.25000000000003], [121.0, 226.69072164948454], [122.0, 224.7988826815643], [123.0, 214.20657276995306], [124.0, 261.1478873239437], [125.0, 229.2307692307694], [126.0, 248.80861812778633], [127.0, 222.32584269662922], [128.0, 243.87248322147647], [129.0, 278.1727748691097], [130.0, 234.05276248001383], [131.0, 246.32240437158464], [132.0, 227.69191919191917], [133.0, 255.57711442786066], [134.0, 242.14213197969536], [135.0, 220.72772277227725], [136.0, 220.13658536585362], [137.0, 226.5323383084577], [138.0, 281.4294478527607], [139.0, 287.7096774193548], [140.0, 285.16149068322994], [141.0, 262.94897959183686], [142.0, 307.1788617886181], [143.0, 313.07734806629844], [144.0, 258.19767441860455], [145.0, 271.3117647058824], [146.0, 280.6331658291457], [147.0, 238.89603960396045], [148.0, 291.1279069767441], [149.0, 260.409638554217], [150.0, 326.46012269938626], [151.0, 253.5682819383261], [152.0, 144.3921133703023], [153.0, 282.245810055866], [154.0, 253.97115384615378], [155.0, 250.48936170212775], [156.0, 244.08196721311467], [157.0, 262.3865979381442], [158.0, 256.55648535564853], [159.0, 244.7710280373832], [160.0, 128.60388905340045], [161.0, 325.12121212121207], [162.0, 299.98742138364776], [163.0, 369.5406976744186], [164.0, 145.84040404040405], [165.0, 46.25708061002175], [166.0, 36.46666666666664], [167.0, 280.27807486631025], [168.0, 269.1766666666666], [169.0, 201.65799256505593], [170.0, 105.53962900505898], [171.0, 41.61914460285132], [172.0, 55.84927536231882], [173.0, 292.1098901098903], [174.0, 274.544117647059], [175.0, 271.7617328519856], [176.0, 114.99799196787157], [177.0, 104.44973544973539], [178.0, 40.484615384615374], [179.0, 201.80030983733545], [180.0, 198.1808049535602], [181.0, 319.19248826291084], [182.0, 160.4215246636773], [183.0, 53.187999999999995], [184.0, 63.21987315010571], [185.0, 276.1398963730569], [186.0, 321.43386243386243], [187.0, 289.97872340425545], [188.0, 182.28881987577634], [189.0, 102.00470219435742], [190.0, 174.3268727082238], [191.0, 25.481586402266295], [192.0, 306.8429319371726], [193.0, 310.88], [194.0, 302.09326424870466], [195.0, 180.97196261682234], [196.0, 129.19110378912688], [197.0, 77.1733333333333], [198.0, 277.0579710144926], [199.0, 349.8383838383837], [200.0, 297.74019607843144], [201.0, 215.20065789473682], [202.0, 107.37500000000007], [203.0, 44.00212314225055], [204.0, 229.99530516431926], [205.0, 330.7116564417177], [206.0, 380.90178571428567], [207.0, 402.9805825242718], [208.0, 346.92079207920784], [209.0, 160.52036448985245], [210.0, 191.3451574332403], [211.0, 259.1275125628141], [212.0, 326.9638009049773], [213.0, 333.2136363636364], [214.0, 184.66666666666666], [215.0, 85.47411003236239], [216.0, 38.111111111111114], [217.0, 286.93301435406704], [218.0, 412.64473684210526], [219.0, 452.94086021505365], [220.0, 277.92616413686613], [221.0, 322.0805084745763], [222.0, 173.81161971830986], [223.0, 122.6], [224.0, 326.1927083333334], [225.0, 377.6880733944954], [226.0, 386.027397260274], [227.0, 368.6355555555554], [228.0, 192.61087866108807], [229.0, 76.29530201342283], [230.0, 397.88185654008464], [231.0, 412.8272727272727], [232.0, 403.37499999999994], [233.0, 369.045], [234.0, 229.22159090909105], [235.0, 206.15501519756822], [236.0, 926.3198380566807], [237.0, 420.81884057971024], [238.0, 461.7478991596641], [239.0, 483.84453781512593], [240.0, 294.7242990654207], [241.0, 297.91908177905333], [242.0, 369.28996282527896], [243.0, 401.67816091954006], [244.0, 400.15492957746477], [245.0, 400.815668202765], [246.0, 223.12719298245622], [247.0, 101.94250513347038], [248.0, 347.5698924731184], [249.0, 407.3333333333333], [250.0, 210.39479836353027], [251.0, 164.65837479270297], [252.0, 44.338278931750736], [253.0, 33.800480769230724], [254.0, 71.62222222222222], [255.0, 328.430278884462], [257.0, 158.59883720930222], [256.0, 328.59459459459464], [258.0, 87.86743515850152], [259.0, 154.87230514096174], [260.0, 52.43710691823898], [261.0, 337.8457711442786], [262.0, 380.35233160621766], [263.0, 249.01592356687902], [264.0, 206.77424483306822], [270.0, 423.5641354952652], [271.0, 117.24127906976744], [268.0, 403.8806818181819], [269.0, 309.8904109589039], [265.0, 42.82722513089008], [266.0, 74.8272921108742], [267.0, 330.99999999999994], [273.0, 181.26008968609875], [272.0, 61.16628701594536], [274.0, 364.9218750000001], [275.0, 270.60849056603803], [276.0, 167.94013303769393], [277.0, 159.06238532110095], [278.0, 61.8727272727273], [279.0, 71.43971631205673], [280.0, 223.18506462422215], [286.0, 284.12802768166085], [287.0, 387.42288557213914], [284.0, 137.30360531309287], [285.0, 91.07377049180327], [281.0, 379.2601156069366], [282.0, 418.87850467289735], [283.0, 309.11835748792294], [289.0, 337.08602150537604], [288.0, 417.44074074074064], [290.0, 198.46090534979416], [291.0, 105.49075975359344], [292.0, 106.98373983739836], [293.0, 357.6351351351348], [294.0, 420.4517241379309], [295.0, 388.18965517241384], [296.0, 195.984934086629], [302.0, 285.8513347022582], [303.0, 410.75431861804225], [300.0, 326.53666450357025], [301.0, 417.4813490035759], [297.0, 74.01599999999998], [298.0, 158.61504424778758], [299.0, 420.4109589041096], [305.0, 392.05315614617933], [304.0, 68.41393442622953], [306.0, 437.20645161290327], [307.0, 438.4294117647057], [308.0, 452.6761904761905], [309.0, 410.75254237288146], [310.0, 308.20169174997363], [311.0, 197.33067729083672], [312.0, 468.8328173374611], [318.0, 406.7186440677967], [319.0, 467.1317829457364], [316.0, 256.6566371681416], [317.0, 84.93725490196081], [313.0, 462.78037383177593], [314.0, 461.42384105960264], [315.0, 363.52295918367315], [321.0, 382.4974093264249], [320.0, 463.9062500000001], [322.0, 208.20156555773016], [323.0, 115.64572864321603], [324.0, 369.32950191570876], [325.0, 461.9320388349515], [326.0, 478.3322033898304], [327.0, 428.33933933933946], [328.0, 254.68764044943808], [334.0, 268.76404494382047], [335.0, 110.6921606118547], [332.0, 453.49758064516095], [333.0, 311.4600210108555], [329.0, 182.6949494949494], [330.0, 416.9793814432991], [331.0, 491.3217054263567], [337.0, 440.18217054263573], [336.0, 360.49999999999994], [338.0, 502.9112627986348], [339.0, 512.6489361702129], [340.0, 362.675357061892], [341.0, 100.20668058455114], [342.0, 123.32625482625492], [343.0, 342.13815789473693], [344.0, 343.9537572254335], [350.0, 354.79185520362], [351.0, 168.36259541984725], [348.0, 53.834394904458605], [349.0, 3924.472222222222], [345.0, 292.5508021390374], [346.0, 321.75422427035244], [347.0, 80.385593220339], [353.0, 99.87748344370864], [352.0, 366.7005545286509], [354.0, 65.17808219178082], [355.0, 109.62841530054648], [356.0, 456.3910614525136], [357.0, 426.6397058823532], [358.0, 292.6459627329195], [359.0, 77.94339622641503], [360.0, 325.2923944884458], [366.0, 33.99775280898877], [367.0, 118.06249999999997], [364.0, 465.41149425287364], [365.0, 169.0956399437414], [361.0, 74.23776223776221], [362.0, 474.62603878116334], [363.0, 247.03684210526325], [369.0, 572.548780487805], [368.0, 445.7201365187715], [370.0, 263.20284351819186], [371.0, 282.6235294117648], [372.0, 236.87015945330322], [373.0, 163.43203883495133], [374.0, 211.56704980842892], [375.0, 415.85611510791387], [376.0, 505.7703180212012], [382.0, 462.02868852459005], [383.0, 337.8967551622422], [380.0, 99.06698564593299], [381.0, 339.1521739130434], [377.0, 283.0819672131147], [378.0, 599.0939999999999], [379.0, 489.33453237410083], [385.0, 186.55072463768124], [384.0, 252.96192384769589], [386.0, 53.68749999999999], [387.0, 309.74299065420547], [388.0, 443.33640552995405], [389.0, 243.67924349881744], [390.0, 308.911149825784], [391.0, 154.19384057971024], [392.0, 131.96474358974368], [398.0, 62.03672316384181], [399.0, 420.49999999999994], [396.0, 450.15425531914894], [397.0, 192.832558139535], [393.0, 454.9147286821707], [394.0, 553.1543624161069], [395.0, 564.4814814814818], [401.0, 549.0545454545456], [400.0, 337.9691016983838], [402.0, 573.8053097345131], [403.0, 564.8504672897194], [404.0, 508.4524361948957], [405.0, 287.3281938325992], [406.0, 536.3097345132745], [407.0, 581.6317460317464], [408.0, 661.16], [414.0, 567.5], [415.0, 668.0487179487177], [412.0, 419.2432432432432], [413.0, 569.0860759493667], [409.0, 651.275510204081], [410.0, 133.7286432160804], [411.0, 438.31768388106354], [417.0, 313.69769858945756], [416.0, 656.6], [418.0, 411.1817860924809], [419.0, 612.1557562076749], [420.0, 573.3571428571429], [421.0, 516.3996138996134], [422.0, 308.55809128630676], [423.0, 181.5430016863405], [424.0, 50.407407407407405], [430.0, 402.6398355512285], [431.0, 297.7993311036789], [428.0, 491.74294670846365], [429.0, 339.44065281899105], [425.0, 530.4799054373518], [426.0, 735.1052631578947], [427.0, 548.6680761099371], [433.0, 212.63141025641033], [432.0, 553.9848484848483], [434.0, 515.8693586698338], [435.0, 237.3019693654266], [436.0, 214.0273794002608], [437.0, 67.46666666666665], [438.0, 470.4441087613293], [439.0, 365.5629139072848], [440.0, 237.0373514431238], [446.0, 214.74199623352172], [447.0, 105.21346153846152], [444.0, 459.6810810810812], [445.0, 583.4502559845043], [441.0, 118.6721649484536], [442.0, 106.8766756032172], [443.0, 145.8037383177571], [449.0, 103.4961832061069], [448.0, 51.530303030303045], [450.0, 622.1100917431191], [451.0, 511.6750000000003], [452.0, 288.92447916666674], [453.0, 309.04304635761576], [454.0, 73.60957178841305], [455.0, 85.57950530035332], [456.0, 525.7802197802199], [462.0, 202.7527472527473], [463.0, 414.88732394366184], [460.0, 297.9260936509382], [461.0, 91.84026258205694], [457.0, 551.9404517453803], [458.0, 256.4166666666666], [459.0, 462.23731884057963], [465.0, 528.8975609756101], [464.0, 542.0991735537189], [466.0, 380.4133333333335], [467.0, 190.85126582278488], [468.0, 76.45419847328246], [469.0, 923.0460251046022], [470.0, 504.153846153846], [471.0, 446.8084801043704], [472.0, 313.7235576923076], [478.0, 336.7874125874124], [479.0, 58.898907103825145], [476.0, 347.56619718309827], [477.0, 440.9110320284696], [473.0, 137.80077369439073], [474.0, 65.5287009063444], [475.0, 381.96407185628743], [481.0, 542.9843137254904], [480.0, 46.45208845208845], [482.0, 491.75000000000006], [483.0, 520.1570512820515], [484.0, 271.8127147766321], [485.0, 49.087403598971726], [486.0, 117.73479318734806], [487.0, 281.875], [488.0, 474.4076433121018], [495.0, 568.2705627705632], [494.0, 771.2727272727273], [492.0, 323.1192842942346], [493.0, 97.59465478841877], [489.0, 603.7714285714286], [490.0, 338.4572080639042], [491.0, 548.5734767025092], [496.0, 836.88], [497.0, 578.0239130434782], [498.0, 261.54676258992816], [499.0, 129.1], [500.0, 375.8042330727856], [1.0, 35959.8]], "isOverall": false, "label": "Requisição HTTP", "isController": false}, {"data": [[326.9055200559718, 303.53510027984316]], "isOverall": false, "label": "Requisição HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72816188E12, "maxY": 2177006.8, "series": [{"data": [[1.72816188E12, 37234.85], [1.72816242E12, 878956.5333333333], [1.72816218E12, 2146988.4], [1.72816248E12, 483.23333333333335], [1.72816212E12, 2130029.2], [1.72816254E12, 587.8666666666667], [1.72816206E12, 1990368.95], [1.7281626E12, 156.95], [1.728162E12, 1685973.35], [1.7281623E12, 2038929.7166666666], [1.72816194E12, 626425.4], [1.72816236E12, 1852908.85], [1.72816224E12, 2177006.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72816188E12, 2436.2833333333333], [1.72816242E12, 37331.65], [1.72816218E12, 57943.75], [1.72816248E12, 4.233333333333333], [1.72816212E12, 57670.7], [1.72816254E12, 4.233333333333333], [1.72816206E12, 58523.71666666667], [1.7281626E12, 0.0], [1.728162E12, 57461.15], [1.7281623E12, 57844.26666666667], [1.72816194E12, 40987.13333333333], [1.72816236E12, 57571.21666666667], [1.72816224E12, 58036.88333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7281626E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 178.9854009931594, "minX": 1.72816188E12, "maxY": 175053.1, "series": [{"data": [[1.72816188E12, 210.45612510860124], [1.72816242E12, 213.78944651790565], [1.72816218E12, 337.92946407113897], [1.72816248E12, 175053.1], [1.72816212E12, 288.3011139555832], [1.72816254E12, 158658.58333333334], [1.72816206E12, 231.0922040494147], [1.7281626E12, 158498.33333333334], [1.728162E12, 178.9854009931594], [1.7281623E12, 390.19832005323946], [1.72816194E12, 212.9594608551958], [1.72816236E12, 309.30263647946833], [1.72816224E12, 363.7770432896034]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7281626E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72816188E12, "maxY": 26256.5, "series": [{"data": [[1.72816188E12, 210.42397914856642], [1.72816242E12, 181.3242277455736], [1.72816218E12, 278.67466611735165], [1.72816248E12, 26256.5], [1.72816212E12, 228.33017366636744], [1.72816254E12, 21833.666666666668], [1.72816206E12, 193.16495034601684], [1.7281626E12, 0.0], [1.728162E12, 156.59235736663825], [1.7281623E12, 312.408079572641], [1.72816194E12, 212.91737244371024], [1.72816236E12, 226.145153386259], [1.72816224E12, 306.7824841520027]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7281626E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 124.33008674154365, "minX": 1.72816188E12, "maxY": 175037.5, "series": [{"data": [[1.72816188E12, 132.96959165942653], [1.72816242E12, 153.89823711585927], [1.72816218E12, 247.64141518178968], [1.72816248E12, 175037.5], [1.72816212E12, 212.86762263890068], [1.72816254E12, 158645.4166666667], [1.72816206E12, 168.1495860638426], [1.7281626E12, 158498.33333333334], [1.728162E12, 124.33008674154365], [1.7281623E12, 289.38696332535716], [1.72816194E12, 136.27375542243385], [1.72816236E12, 236.38104479074684], [1.72816224E12, 265.9241499711843]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7281626E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 187.0, "minX": 1.72816188E12, "maxY": 131824.0, "series": [{"data": [[1.72816206E12, 131367.0], [1.72816188E12, 460.0], [1.72816242E12, 131280.0], [1.72816218E12, 131743.0], [1.728162E12, 1653.0], [1.7281623E12, 131586.0], [1.72816248E12, 131283.0], [1.72816212E12, 130836.0], [1.72816194E12, 1227.0], [1.72816236E12, 131305.0], [1.72816224E12, 131824.0], [1.72816254E12, 131297.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72816206E12, 435.0], [1.72816188E12, 223.0], [1.72816242E12, 292.0], [1.72816218E12, 717.0], [1.728162E12, 337.0], [1.7281623E12, 793.0], [1.72816248E12, 131283.0], [1.72816212E12, 608.0], [1.72816194E12, 230.0], [1.72816236E12, 500.0], [1.72816224E12, 837.9000000000015], [1.72816254E12, 131297.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72816206E12, 525.0], [1.72816188E12, 253.92000000000007], [1.72816242E12, 374.0], [1.72816218E12, 850.9900000000016], [1.728162E12, 414.0], [1.7281623E12, 1041.0], [1.72816248E12, 131283.0], [1.72816212E12, 714.0], [1.72816194E12, 257.0], [1.72816236E12, 589.0], [1.72816224E12, 1070.0], [1.72816254E12, 131297.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72816206E12, 458.0], [1.72816188E12, 232.39999999999986], [1.72816242E12, 324.0], [1.72816218E12, 751.0], [1.728162E12, 359.0], [1.7281623E12, 840.0], [1.72816248E12, 131283.0], [1.72816212E12, 639.0], [1.72816194E12, 238.0], [1.72816236E12, 520.0], [1.72816224E12, 896.0], [1.72816254E12, 131297.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72816206E12, 210.0], [1.72816188E12, 190.0], [1.72816242E12, 190.0], [1.72816218E12, 234.0], [1.728162E12, 191.0], [1.7281623E12, 207.0], [1.72816248E12, 131282.0], [1.72816212E12, 198.0], [1.72816194E12, 187.0], [1.72816236E12, 196.0], [1.72816224E12, 213.0], [1.72816254E12, 130707.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72816206E12, 381.0], [1.72816188E12, 208.0], [1.72816242E12, 235.0], [1.72816218E12, 604.0], [1.728162E12, 279.0], [1.7281623E12, 639.0], [1.72816248E12, 131282.5], [1.72816212E12, 495.0], [1.72816194E12, 210.0], [1.72816236E12, 402.0], [1.72816224E12, 681.0], [1.72816254E12, 131002.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72816254E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 214972.0, "series": [{"data": [[4.0, 225.5], [8.0, 206.5], [14.0, 202.0], [19.0, 215.0], [23.0, 213.0], [27.0, 213.0], [32.0, 211.5], [38.0, 211.0], [42.0, 206.0], [45.0, 211.0], [44.0, 206.0], [47.0, 207.0], [46.0, 209.0], [49.0, 209.0], [48.0, 208.0], [54.0, 208.0], [73.0, 207.0], [82.0, 207.0], [81.0, 205.0], [83.0, 204.0], [80.0, 207.0], [84.0, 205.0], [99.0, 208.0], [117.0, 205.0], [128.0, 206.0], [137.0, 208.0], [151.0, 204.0], [160.0, 206.0], [166.0, 214.0], [179.0, 213.0], [191.0, 206.0], [188.0, 208.0], [190.0, 204.0], [184.0, 206.0], [185.0, 206.0], [187.0, 208.0], [186.0, 207.0], [192.0, 209.0], [197.0, 209.0], [195.0, 226.0], [193.0, 233.0], [201.0, 220.0], [209.0, 205.0], [215.0, 212.0], [208.0, 213.0], [212.0, 204.0], [210.0, 205.0], [218.0, 235.5], [217.0, 207.0], [234.0, 209.0], [244.0, 228.0], [254.0, 258.0], [261.0, 204.0], [267.0, 206.0], [284.0, 205.0], [276.0, 254.0], [286.0, 236.0], [294.0, 205.0], [301.0, 244.0], [303.0, 240.0], [295.0, 243.0], [319.0, 206.0], [316.0, 219.0], [307.0, 216.0], [310.0, 226.0], [311.0, 223.0], [328.0, 207.0], [331.0, 204.0], [332.0, 207.0], [325.0, 208.0], [324.0, 207.0], [323.0, 211.0], [334.0, 210.0], [337.0, 207.0], [338.0, 204.0], [356.0, 213.0], [360.0, 275.5], [380.0, 232.0], [385.0, 207.0], [399.0, 449.0], [390.0, 525.5], [388.0, 604.0], [409.0, 215.0], [415.0, 651.0], [405.0, 238.0], [426.0, 204.0], [431.0, 207.0], [425.0, 221.0], [421.0, 608.0], [416.0, 559.5], [430.0, 389.0], [443.0, 217.0], [439.0, 217.0], [446.0, 220.0], [444.0, 686.0], [441.0, 433.0], [438.0, 237.0], [450.0, 213.0], [462.0, 209.0], [458.0, 211.0], [453.0, 214.0], [455.0, 213.0], [461.0, 219.0], [451.0, 221.0], [460.0, 757.5], [464.0, 212.0], [474.0, 281.0], [478.0, 319.0], [467.0, 489.5], [473.0, 560.0], [470.0, 520.5], [477.0, 253.0], [465.0, 222.0], [487.0, 217.0], [484.0, 221.0], [486.0, 254.0], [489.0, 207.0], [511.0, 227.0], [497.0, 336.0], [505.0, 379.0], [501.0, 581.0], [496.0, 497.0], [503.0, 511.0], [508.0, 322.0], [499.0, 300.0], [516.0, 219.0], [524.0, 213.0], [525.0, 404.0], [522.0, 406.0], [533.0, 227.0], [519.0, 237.0], [518.0, 535.0], [537.0, 617.5], [513.0, 269.0], [527.0, 494.5], [526.0, 231.0], [534.0, 277.0], [538.0, 261.0], [531.0, 360.5], [530.0, 707.0], [529.0, 521.0], [542.0, 352.0], [571.0, 239.0], [564.0, 218.0], [552.0, 356.0], [557.0, 473.0], [574.0, 284.0], [545.0, 229.0], [544.0, 547.0], [558.0, 276.0], [566.0, 307.0], [567.0, 593.0], [547.0, 301.0], [560.0, 416.0], [601.0, 230.0], [600.0, 223.0], [579.0, 457.0], [605.0, 250.0], [592.0, 436.0], [593.0, 319.0], [587.0, 363.0], [590.0, 404.0], [576.0, 478.0], [596.0, 391.0], [594.0, 409.0], [599.0, 434.0], [603.0, 460.0], [602.0, 794.0], [615.0, 262.0], [627.0, 274.0], [629.0, 488.0], [634.0, 340.0], [638.0, 704.0], [617.0, 374.0], [616.0, 249.0], [618.0, 452.5], [608.0, 389.0], [621.0, 444.0], [619.0, 313.0], [613.0, 743.0], [610.0, 363.0], [626.0, 576.5], [639.0, 275.0], [642.0, 336.0], [661.0, 335.0], [670.0, 462.0], [667.0, 232.0], [646.0, 474.0], [645.0, 433.0], [643.0, 263.0], [648.0, 627.0], [650.0, 620.0], [664.0, 516.0], [665.0, 711.0], [666.0, 497.0], [653.0, 536.0], [654.0, 628.0], [655.0, 511.0], [702.0, 555.0], [693.0, 292.0], [697.0, 406.0], [680.0, 427.0], [681.0, 591.0], [703.0, 695.5], [699.0, 542.5], [694.0, 441.0], [691.0, 330.0], [732.0, 266.0], [711.0, 649.0], [710.0, 221.0], [735.0, 309.0], [733.0, 440.0], [712.0, 363.0], [720.0, 362.0], [727.0, 381.0], [726.0, 419.0], [706.0, 503.0], [719.0, 596.0], [731.0, 714.0], [741.0, 282.0], [748.0, 282.0], [750.0, 362.0], [761.0, 401.0], [739.0, 562.5], [767.0, 583.0], [757.0, 886.0], [763.0, 1535.0], [765.0, 504.0], [766.0, 225.5], [740.0, 688.0], [755.0, 498.0], [771.0, 356.0], [796.0, 358.0], [780.0, 418.0], [776.0, 409.0], [782.0, 447.5], [781.0, 679.0], [783.0, 758.0], [768.0, 685.0], [795.0, 311.0], [792.0, 497.5], [773.0, 415.0], [789.0, 649.0], [785.0, 623.0], [784.0, 594.0], [798.0, 590.0], [826.0, 327.0], [825.0, 302.0], [807.0, 395.5], [820.0, 328.0], [819.0, 259.0], [806.0, 499.0], [811.0, 285.0], [812.0, 479.0], [828.0, 534.5], [813.0, 490.0], [802.0, 681.0], [801.0, 538.5], [816.0, 524.0], [829.0, 531.5], [858.0, 411.0], [836.0, 518.0], [839.0, 341.0], [842.0, 385.5], [863.0, 349.0], [843.0, 411.0], [834.0, 730.0], [861.0, 429.0], [859.0, 427.0], [851.0, 417.0], [838.0, 500.0], [893.0, 372.0], [869.0, 361.0], [881.0, 362.0], [894.0, 450.0], [879.0, 392.0], [876.0, 454.0], [888.0, 508.0], [870.0, 522.0], [874.0, 468.0], [885.0, 596.0], [887.0, 398.0], [886.0, 611.0], [873.0, 582.0], [872.0, 367.5], [891.0, 681.0], [900.0, 344.0], [896.0, 333.0], [899.0, 320.5], [918.0, 664.5], [926.0, 611.0], [920.0, 752.0], [911.0, 584.0], [910.0, 328.0], [901.0, 714.0], [903.0, 461.0], [912.0, 896.0], [915.0, 493.0], [930.0, 335.0], [934.0, 276.0], [932.0, 254.0], [953.0, 322.0], [935.0, 321.0], [938.0, 559.0], [928.0, 473.0], [955.0, 556.0], [958.0, 707.0], [959.0, 330.0], [937.0, 543.0], [939.0, 712.0], [966.0, 401.0], [971.0, 287.0], [981.0, 363.0], [977.0, 393.5], [978.0, 685.0], [980.0, 457.0], [976.0, 466.0], [985.0, 849.0], [986.0, 723.0], [988.0, 225.0], [969.0, 403.0], [963.0, 503.0], [972.0, 409.0], [1023.0, 289.0], [1009.0, 315.0], [1018.0, 441.0], [993.0, 333.0], [1000.0, 433.0], [1002.0, 492.0], [1003.0, 588.0], [1011.0, 462.0], [1019.0, 291.0], [1037.0, 276.0], [1061.0, 292.0], [1059.0, 468.0], [1047.0, 355.0], [1026.0, 472.0], [1034.0, 281.0], [1053.0, 557.0], [1039.0, 393.0], [1077.0, 475.5], [1074.0, 222.0], [1058.0, 320.0], [1065.0, 304.0], [1071.0, 675.0], [1086.0, 364.5], [1056.0, 611.0], [1087.0, 549.0], [1079.0, 445.0], [1045.0, 412.0], [1042.0, 463.0], [1043.0, 266.0], [1044.0, 262.0], [1119.0, 392.0], [1115.0, 320.0], [1094.0, 260.0], [1091.0, 773.0], [1106.0, 289.0], [1117.0, 406.5], [1126.0, 507.0], [1134.0, 259.0], [1123.0, 282.0], [1145.0, 701.0], [1147.0, 330.0], [1140.0, 812.0], [1139.0, 263.0], [1141.0, 384.0], [1121.0, 579.5], [1101.0, 506.0], [1099.0, 511.0], [1100.0, 232.5], [1113.0, 435.0], [1111.0, 242.0], [1107.0, 460.0], [1095.0, 569.0], [1152.0, 358.0], [1169.0, 518.0], [1171.0, 377.0], [1211.0, 395.0], [1198.0, 725.0], [1187.0, 434.0], [1175.0, 514.0], [1174.0, 258.5], [1165.0, 346.0], [1160.0, 222.0], [1205.0, 559.0], [1208.0, 546.0], [1207.0, 282.0], [1180.0, 672.0], [1182.0, 696.0], [1276.0, 534.0], [1261.0, 256.0], [1220.0, 377.0], [1243.0, 553.0], [1249.0, 472.0], [1278.0, 488.5], [1223.0, 656.0], [1230.0, 566.0], [1226.0, 579.0], [1224.0, 400.0], [1260.0, 609.0], [1253.0, 613.0], [1258.0, 295.5], [1272.0, 810.0], [1329.0, 598.0], [1316.0, 313.0], [1317.0, 372.5], [1299.0, 408.0], [1297.0, 680.0], [1333.0, 343.0], [1318.0, 441.0], [1324.0, 714.0], [1341.0, 644.0], [1312.0, 601.5], [1311.0, 558.0], [1286.0, 603.0], [1281.0, 276.5], [1356.0, 273.0], [1405.0, 255.5], [1364.0, 269.0], [1352.0, 537.0], [1350.0, 668.0], [1372.0, 669.0], [1365.0, 658.0], [1347.0, 717.5], [1397.0, 379.0], [1400.0, 735.0], [1406.0, 314.5], [1388.0, 387.0], [1358.0, 410.0], [1392.0, 625.0], [1362.0, 506.0], [1382.0, 595.0], [1469.0, 518.0], [1459.0, 337.0], [1447.0, 258.0], [1412.0, 278.0], [1433.0, 616.0], [1429.0, 460.0], [1451.0, 335.5], [1453.0, 577.0], [1468.0, 677.0], [1464.0, 706.0], [1462.0, 521.5], [1420.0, 528.0], [1423.0, 503.0], [1417.0, 786.0], [1441.0, 553.0], [1413.0, 681.5], [1448.0, 510.0], [1522.0, 669.0], [1491.0, 559.0], [1483.0, 645.0], [1531.0, 784.5], [1495.0, 653.0], [1494.0, 750.0], [1529.0, 572.0], [1559.0, 294.0], [1592.0, 651.0], [1562.0, 625.0], [1618.0, 760.0], [1602.0, 646.0], [1.0, 131282.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 181059.0], [3.0, 144476.0], [460.0, 11.0], [477.0, 32.0], [465.0, 214589.0], [497.0, 162858.0], [537.0, 39.0], [527.0, 33.0], [518.0, 232.0], [529.0, 57.0], [525.0, 44.0], [533.0, 22.0], [566.0, 51.5], [544.0, 7.0], [557.0, 14.5], [593.0, 16.0], [587.0, 34.5], [602.0, 214972.0], [576.0, 173028.0], [590.0, 51.0], [596.0, 10.0], [592.0, 6.0], [601.0, 40.0], [615.0, 10.0], [627.0, 5.0], [629.0, 35.5], [608.0, 35.0], [626.0, 4.0], [639.0, 144.0], [613.0, 36.0], [618.0, 38.5], [619.0, 42.5], [646.0, 88.0], [661.0, 22.0], [670.0, 6.0], [667.0, 76.0], [645.0, 23.0], [650.0, 29.5], [664.0, 199.0], [665.0, 63.5], [653.0, 88.0], [654.0, 71.0], [666.0, 26.0], [655.0, 32.0], [693.0, 48.0], [697.0, 59.5], [702.0, 22.0], [680.0, 94.0], [703.0, 33.0], [699.0, 41.0], [694.0, 27.0], [691.0, 16.5], [732.0, 38.5], [711.0, 33.0], [710.0, 53.0], [735.0, 16.0], [733.0, 62.0], [712.0, 50.5], [720.0, 47.5], [727.0, 102.5], [726.0, 17.5], [706.0, 10.5], [719.0, 44.0], [731.0, 63.0], [741.0, 25.0], [748.0, 52.0], [750.0, 22.0], [761.0, 124.0], [739.0, 86.5], [767.0, 36.0], [757.0, 40.0], [763.0, 41.5], [765.0, 74.0], [766.0, 31.5], [740.0, 53.0], [755.0, 44.0], [771.0, 33.0], [796.0, 20.0], [780.0, 65.0], [776.0, 23.0], [782.0, 26.0], [781.0, 71.5], [795.0, 34.0], [792.0, 29.0], [773.0, 40.5], [784.0, 11.0], [798.0, 42.0], [783.0, 6.5], [826.0, 24.0], [825.0, 32.0], [807.0, 27.0], [820.0, 48.0], [819.0, 44.0], [806.0, 56.0], [811.0, 111.0], [812.0, 60.0], [828.0, 103.5], [813.0, 183.0], [802.0, 248.0], [801.0, 51.0], [816.0, 54.0], [829.0, 66.0], [858.0, 8.5], [836.0, 80.0], [839.0, 33.0], [842.0, 38.5], [863.0, 80.0], [843.0, 10.5], [844.0, 96.5], [834.0, 225.0], [861.0, 143.0], [859.0, 40.0], [851.0, 86.0], [838.0, 85.5], [893.0, 20.0], [869.0, 22.0], [881.0, 29.0], [894.0, 92.0], [879.0, 89.0], [876.0, 92.0], [888.0, 98.0], [870.0, 112.0], [874.0, 42.0], [885.0, 23.0], [887.0, 46.0], [886.0, 55.0], [873.0, 19.0], [872.0, 38.0], [891.0, 30.5], [900.0, 57.0], [896.0, 33.0], [899.0, 51.0], [918.0, 96.0], [926.0, 105.0], [920.0, 55.0], [911.0, 96.0], [910.0, 93.0], [901.0, 79.0], [903.0, 115.5], [912.0, 57.0], [915.0, 68.5], [930.0, 43.0], [934.0, 46.0], [932.0, 58.0], [953.0, 90.0], [935.0, 67.0], [938.0, 37.5], [928.0, 296.5], [955.0, 219.0], [958.0, 135.0], [959.0, 70.0], [937.0, 91.5], [939.0, 37.5], [966.0, 48.0], [971.0, 36.0], [981.0, 42.0], [977.0, 40.0], [978.0, 68.5], [980.0, 97.0], [976.0, 62.0], [985.0, 54.0], [986.0, 58.0], [988.0, 71.0], [969.0, 44.0], [963.0, 106.5], [965.0, 38.0], [972.0, 59.0], [1023.0, 37.0], [1009.0, 46.0], [1018.0, 54.0], [993.0, 36.5], [1000.0, 97.0], [1002.0, 102.0], [1003.0, 36.0], [1011.0, 114.0], [1019.0, 68.0], [1037.0, 23.0], [1061.0, 34.0], [1059.0, 76.0], [1047.0, 50.5], [1026.0, 65.0], [1034.0, 52.0], [1053.0, 142.0], [1039.0, 75.0], [1077.0, 93.0], [1074.0, 41.0], [1058.0, 108.5], [1065.0, 46.5], [1071.0, 44.0], [1086.0, 83.0], [1056.0, 74.0], [1087.0, 134.0], [1079.0, 60.0], [1045.0, 99.0], [1042.0, 77.0], [1043.0, 43.0], [1044.0, 75.0], [1119.0, 60.0], [1115.0, 35.0], [1094.0, 47.0], [1091.0, 55.5], [1106.0, 55.0], [1117.0, 76.0], [1126.0, 99.0], [1134.0, 64.0], [1123.0, 112.0], [1145.0, 85.0], [1147.0, 108.0], [1140.0, 109.0], [1139.0, 44.0], [1141.0, 208.0], [1144.0, 65.0], [1121.0, 25.0], [1101.0, 134.0], [1099.0, 137.0], [1100.0, 45.5], [1113.0, 54.0], [1111.0, 32.0], [1107.0, 118.5], [1095.0, 131.0], [1152.0, 28.0], [1169.0, 49.0], [1171.0, 50.0], [1211.0, 58.0], [1198.0, 50.0], [1187.0, 132.5], [1175.0, 68.0], [1174.0, 63.0], [1165.0, 96.0], [1160.0, 38.0], [1205.0, 77.0], [1208.0, 52.5], [1207.0, 52.0], [1180.0, 41.0], [1182.0, 193.5], [1276.0, 173.0], [1261.0, 57.0], [1220.0, 24.0], [1243.0, 112.0], [1249.0, 36.0], [1278.0, 104.0], [1223.0, 115.0], [1230.0, 56.0], [1226.0, 98.0], [1224.0, 104.0], [1260.0, 153.0], [1253.0, 50.0], [1258.0, 21.0], [1272.0, 178.0], [1329.0, 50.0], [1316.0, 35.0], [1317.0, 62.0], [1299.0, 52.0], [1297.0, 70.0], [1333.0, 64.0], [1318.0, 87.0], [1324.0, 142.0], [1341.0, 79.0], [1312.0, 75.0], [1311.0, 58.0], [1286.0, 81.0], [1281.0, 49.0], [1405.0, 48.0], [1356.0, 24.0], [1364.0, 33.0], [1352.0, 52.0], [1350.0, 78.0], [1372.0, 56.5], [1365.0, 77.0], [1347.0, 108.0], [1397.0, 90.0], [1400.0, 86.0], [1381.0, 47.0], [1406.0, 52.0], [1388.0, 81.0], [1382.0, 36.0], [1358.0, 64.0], [1392.0, 69.0], [1362.0, 126.0], [1469.0, 168.0], [1459.0, 54.0], [1447.0, 52.0], [1412.0, 34.0], [1433.0, 67.0], [1429.0, 39.0], [1451.0, 75.0], [1453.0, 125.0], [1468.0, 70.0], [1464.0, 54.0], [1462.0, 63.0], [1420.0, 81.0], [1423.0, 47.0], [1417.0, 109.0], [1441.0, 97.0], [1413.0, 148.0], [1448.0, 93.0], [1522.0, 53.0], [1491.0, 79.0], [1483.0, 65.5], [1531.0, 97.0], [1495.0, 95.0], [1494.0, 71.0], [1529.0, 68.0], [1559.0, 82.0], [1592.0, 138.0], [1562.0, 79.0], [1618.0, 183.0], [1602.0, 109.0], [1.0, 170041.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1618.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 131282.5, "series": [{"data": [[4.0, 225.5], [8.0, 206.5], [14.0, 202.0], [19.0, 215.0], [23.0, 213.0], [27.0, 213.0], [32.0, 211.5], [38.0, 211.0], [42.0, 206.0], [45.0, 211.0], [44.0, 206.0], [47.0, 207.0], [46.0, 209.0], [49.0, 209.0], [48.0, 208.0], [54.0, 208.0], [73.0, 207.0], [82.0, 207.0], [81.0, 205.0], [83.0, 204.0], [80.0, 207.0], [84.0, 205.0], [99.0, 208.0], [117.0, 205.0], [128.0, 206.0], [137.0, 208.0], [151.0, 204.0], [160.0, 206.0], [166.0, 214.0], [179.0, 213.0], [191.0, 206.0], [188.0, 208.0], [190.0, 204.0], [184.0, 206.0], [185.0, 206.0], [187.0, 208.0], [186.0, 207.0], [192.0, 209.0], [197.0, 209.0], [195.0, 226.0], [193.0, 233.0], [201.0, 220.0], [209.0, 205.0], [215.0, 212.0], [208.0, 213.0], [212.0, 204.0], [210.0, 205.0], [218.0, 235.5], [217.0, 207.0], [234.0, 209.0], [244.0, 228.0], [254.0, 258.0], [261.0, 204.0], [267.0, 206.0], [284.0, 205.0], [276.0, 253.5], [286.0, 236.0], [294.0, 205.0], [301.0, 244.0], [303.0, 240.0], [295.0, 243.0], [319.0, 206.0], [316.0, 219.0], [307.0, 216.0], [310.0, 226.0], [311.0, 223.0], [328.0, 207.0], [331.0, 204.0], [332.0, 207.0], [325.0, 208.0], [324.0, 207.0], [323.0, 211.0], [334.0, 210.0], [337.0, 207.0], [338.0, 204.0], [356.0, 213.0], [360.0, 275.5], [380.0, 232.0], [385.0, 207.0], [399.0, 449.0], [390.0, 525.5], [388.0, 604.0], [409.0, 215.0], [415.0, 651.0], [405.0, 238.0], [426.0, 204.0], [431.0, 207.0], [425.0, 221.0], [421.0, 608.0], [416.0, 559.5], [430.0, 389.0], [443.0, 217.0], [439.0, 217.0], [446.0, 220.0], [444.0, 686.0], [441.0, 433.0], [438.0, 237.0], [450.0, 213.0], [462.0, 209.0], [458.0, 211.0], [453.0, 214.0], [455.0, 213.0], [461.0, 219.0], [451.0, 221.0], [460.0, 757.5], [464.0, 212.0], [474.0, 281.0], [478.0, 319.0], [467.0, 489.5], [473.0, 560.0], [470.0, 520.5], [477.0, 253.0], [465.0, 222.0], [487.0, 217.0], [484.0, 221.0], [486.0, 254.0], [489.0, 207.0], [511.0, 227.0], [497.0, 336.0], [505.0, 379.0], [501.0, 581.0], [496.0, 497.0], [503.0, 511.0], [508.0, 322.0], [499.0, 300.0], [516.0, 218.5], [524.0, 213.0], [525.0, 404.0], [522.0, 406.0], [533.0, 226.0], [519.0, 237.0], [518.0, 535.0], [537.0, 617.0], [513.0, 269.0], [527.0, 494.5], [526.0, 231.0], [534.0, 277.0], [538.0, 261.0], [531.0, 360.5], [530.0, 707.0], [529.0, 521.0], [542.0, 351.5], [571.0, 239.0], [564.0, 218.0], [552.0, 356.0], [557.0, 473.0], [574.0, 284.0], [545.0, 229.0], [544.0, 546.0], [558.0, 276.0], [566.0, 307.0], [567.0, 593.0], [547.0, 301.0], [560.0, 416.0], [601.0, 230.0], [600.0, 223.0], [579.0, 457.0], [605.0, 250.0], [592.0, 436.0], [593.0, 319.0], [587.0, 363.0], [590.0, 404.0], [576.0, 477.0], [596.0, 391.0], [594.0, 409.0], [599.0, 434.0], [603.0, 459.0], [602.0, 794.0], [615.0, 262.0], [627.0, 274.0], [629.0, 487.5], [634.0, 340.0], [638.0, 704.0], [617.0, 374.0], [616.0, 249.0], [618.0, 452.0], [608.0, 389.0], [621.0, 444.0], [619.0, 312.0], [613.0, 743.0], [610.0, 363.0], [626.0, 576.5], [639.0, 275.0], [642.0, 336.0], [661.0, 335.0], [670.0, 462.0], [667.0, 232.0], [646.0, 474.0], [645.0, 433.0], [643.0, 263.0], [648.0, 627.0], [650.0, 619.5], [664.0, 516.0], [665.0, 711.0], [666.0, 497.0], [653.0, 536.0], [654.0, 628.0], [655.0, 511.0], [702.0, 555.0], [693.0, 292.0], [697.0, 406.0], [680.0, 427.0], [681.0, 590.0], [703.0, 695.5], [699.0, 542.5], [694.0, 441.0], [691.0, 330.0], [732.0, 266.0], [711.0, 649.0], [710.0, 221.0], [735.0, 309.0], [733.0, 440.0], [712.0, 362.5], [720.0, 362.0], [727.0, 381.0], [726.0, 419.0], [706.0, 503.0], [719.0, 596.0], [731.0, 714.0], [741.0, 282.0], [748.0, 282.0], [750.0, 362.0], [761.0, 401.0], [739.0, 561.5], [767.0, 582.0], [757.0, 886.0], [763.0, 1535.0], [765.0, 504.0], [766.0, 225.5], [740.0, 688.0], [755.0, 498.0], [771.0, 356.0], [796.0, 358.0], [780.0, 418.0], [776.0, 409.0], [782.0, 447.0], [781.0, 679.0], [783.0, 758.0], [768.0, 685.0], [795.0, 311.0], [792.0, 496.5], [773.0, 415.0], [789.0, 649.0], [785.0, 623.0], [784.0, 594.0], [798.0, 589.0], [826.0, 327.0], [825.0, 302.0], [807.0, 395.5], [820.0, 328.0], [819.0, 259.0], [806.0, 498.0], [811.0, 285.0], [812.0, 479.0], [828.0, 534.0], [813.0, 489.0], [802.0, 681.0], [801.0, 538.5], [816.0, 524.0], [829.0, 531.5], [858.0, 411.0], [836.0, 518.0], [839.0, 341.0], [842.0, 385.5], [863.0, 349.0], [843.0, 411.0], [834.0, 730.0], [861.0, 429.0], [859.0, 426.0], [851.0, 417.0], [838.0, 500.0], [893.0, 372.0], [869.0, 361.0], [881.0, 362.0], [894.0, 450.0], [879.0, 391.5], [876.0, 453.0], [888.0, 508.0], [870.0, 522.0], [874.0, 468.0], [885.0, 596.0], [887.0, 398.0], [886.0, 610.0], [873.0, 582.0], [872.0, 367.5], [891.0, 681.0], [900.0, 344.0], [896.0, 332.5], [899.0, 320.5], [918.0, 664.5], [926.0, 611.0], [920.0, 751.5], [911.0, 584.0], [910.0, 328.0], [901.0, 714.0], [903.0, 461.0], [912.0, 896.0], [915.0, 493.0], [930.0, 335.0], [934.0, 276.0], [932.0, 254.0], [953.0, 321.0], [935.0, 321.0], [938.0, 559.0], [928.0, 473.0], [955.0, 555.0], [958.0, 706.0], [959.0, 330.0], [937.0, 543.0], [939.0, 712.0], [966.0, 401.0], [971.0, 287.0], [981.0, 363.0], [977.0, 393.0], [978.0, 684.5], [980.0, 457.0], [976.0, 466.0], [985.0, 849.0], [986.0, 723.0], [988.0, 225.0], [969.0, 403.0], [963.0, 503.0], [972.0, 408.0], [1023.0, 289.0], [1009.0, 315.0], [1018.0, 441.0], [993.0, 333.0], [1000.0, 433.0], [1002.0, 492.0], [1003.0, 588.0], [1011.0, 462.0], [1019.0, 290.0], [1037.0, 276.0], [1061.0, 292.0], [1059.0, 468.0], [1047.0, 355.0], [1026.0, 472.0], [1034.0, 281.0], [1053.0, 557.0], [1039.0, 392.0], [1077.0, 475.0], [1074.0, 222.0], [1058.0, 320.0], [1065.0, 304.0], [1071.0, 675.0], [1086.0, 362.0], [1056.0, 610.0], [1087.0, 548.0], [1079.0, 445.0], [1045.0, 411.0], [1042.0, 463.0], [1043.0, 266.0], [1044.0, 262.0], [1119.0, 392.0], [1115.0, 319.0], [1094.0, 260.0], [1091.0, 773.0], [1106.0, 289.0], [1117.0, 406.5], [1126.0, 507.0], [1134.0, 259.0], [1123.0, 282.0], [1145.0, 701.0], [1147.0, 330.0], [1140.0, 812.0], [1139.0, 263.0], [1141.0, 384.0], [1121.0, 579.5], [1101.0, 506.0], [1099.0, 511.0], [1100.0, 232.5], [1113.0, 435.0], [1111.0, 242.0], [1107.0, 460.0], [1095.0, 569.0], [1152.0, 357.5], [1169.0, 518.0], [1171.0, 377.0], [1211.0, 395.0], [1198.0, 725.0], [1187.0, 434.0], [1175.0, 513.0], [1174.0, 257.5], [1165.0, 346.0], [1160.0, 222.0], [1205.0, 559.0], [1208.0, 546.0], [1207.0, 282.0], [1180.0, 672.0], [1182.0, 696.0], [1276.0, 534.0], [1261.0, 256.0], [1220.0, 377.0], [1243.0, 553.0], [1249.0, 472.0], [1278.0, 488.5], [1223.0, 656.0], [1230.0, 566.0], [1226.0, 579.0], [1224.0, 400.0], [1260.0, 609.0], [1253.0, 613.0], [1258.0, 295.5], [1272.0, 810.0], [1329.0, 598.0], [1316.0, 313.0], [1317.0, 372.0], [1299.0, 408.0], [1297.0, 680.0], [1333.0, 343.0], [1318.0, 441.0], [1324.0, 713.5], [1341.0, 644.0], [1312.0, 600.5], [1311.0, 558.0], [1286.0, 603.0], [1281.0, 276.5], [1356.0, 273.0], [1405.0, 255.5], [1364.0, 269.0], [1352.0, 537.0], [1350.0, 667.5], [1372.0, 669.0], [1365.0, 658.0], [1347.0, 717.5], [1397.0, 379.0], [1400.0, 735.0], [1406.0, 314.5], [1388.0, 386.0], [1358.0, 410.0], [1392.0, 623.5], [1362.0, 505.0], [1382.0, 595.0], [1469.0, 518.0], [1459.0, 337.0], [1447.0, 258.0], [1412.0, 278.0], [1433.0, 616.0], [1429.0, 460.0], [1451.0, 335.5], [1453.0, 577.0], [1468.0, 677.0], [1464.0, 705.0], [1462.0, 521.5], [1420.0, 527.0], [1423.0, 503.0], [1417.0, 786.0], [1441.0, 553.0], [1413.0, 681.5], [1448.0, 510.0], [1522.0, 669.0], [1491.0, 559.0], [1483.0, 645.0], [1531.0, 784.5], [1495.0, 653.0], [1494.0, 750.0], [1529.0, 572.0], [1559.0, 294.0], [1592.0, 651.0], [1562.0, 625.0], [1618.0, 760.0], [1602.0, 646.0], [1.0, 131282.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [460.0, 0.0], [477.0, 0.0], [465.0, 0.0], [497.0, 0.0], [537.0, 0.0], [527.0, 0.0], [518.0, 0.0], [529.0, 0.0], [525.0, 0.0], [533.0, 0.0], [566.0, 0.0], [544.0, 0.0], [557.0, 0.0], [593.0, 0.0], [587.0, 0.0], [602.0, 0.0], [576.0, 0.0], [590.0, 0.0], [596.0, 0.0], [592.0, 0.0], [601.0, 0.0], [615.0, 0.0], [627.0, 0.0], [629.0, 0.0], [608.0, 0.0], [626.0, 0.0], [639.0, 0.0], [613.0, 0.0], [618.0, 0.0], [619.0, 0.0], [646.0, 0.0], [661.0, 0.0], [670.0, 0.0], [667.0, 0.0], [645.0, 0.0], [650.0, 0.0], [664.0, 0.0], [665.0, 0.0], [653.0, 0.0], [654.0, 0.0], [666.0, 0.0], [655.0, 0.0], [693.0, 0.0], [697.0, 0.0], [702.0, 0.0], [680.0, 0.0], [703.0, 0.0], [699.0, 0.0], [694.0, 0.0], [691.0, 0.0], [732.0, 0.0], [711.0, 0.0], [710.0, 0.0], [735.0, 0.0], [733.0, 0.0], [712.0, 0.0], [720.0, 0.0], [727.0, 0.0], [726.0, 0.0], [706.0, 0.0], [719.0, 0.0], [731.0, 0.0], [741.0, 0.0], [748.0, 0.0], [750.0, 0.0], [761.0, 0.0], [739.0, 0.0], [767.0, 0.0], [757.0, 0.0], [763.0, 0.0], [765.0, 0.0], [766.0, 0.0], [740.0, 0.0], [755.0, 0.0], [771.0, 0.0], [796.0, 0.0], [780.0, 0.0], [776.0, 0.0], [782.0, 0.0], [781.0, 0.0], [795.0, 0.0], [792.0, 0.0], [773.0, 0.0], [784.0, 0.0], [798.0, 0.0], [783.0, 0.0], [826.0, 0.0], [825.0, 0.0], [807.0, 0.0], [820.0, 0.0], [819.0, 0.0], [806.0, 0.0], [811.0, 0.0], [812.0, 0.0], [828.0, 0.0], [813.0, 0.0], [802.0, 0.0], [801.0, 0.0], [816.0, 0.0], [829.0, 0.0], [858.0, 0.0], [836.0, 0.0], [839.0, 0.0], [842.0, 0.0], [863.0, 0.0], [843.0, 0.0], [844.0, 0.0], [834.0, 0.0], [861.0, 0.0], [859.0, 0.0], [851.0, 0.0], [838.0, 0.0], [893.0, 0.0], [869.0, 0.0], [881.0, 0.0], [894.0, 0.0], [879.0, 0.0], [876.0, 0.0], [888.0, 0.0], [870.0, 0.0], [874.0, 0.0], [885.0, 0.0], [887.0, 0.0], [886.0, 0.0], [873.0, 0.0], [872.0, 0.0], [891.0, 0.0], [900.0, 0.0], [896.0, 0.0], [899.0, 0.0], [918.0, 0.0], [926.0, 0.0], [920.0, 0.0], [911.0, 0.0], [910.0, 0.0], [901.0, 0.0], [903.0, 0.0], [912.0, 0.0], [915.0, 0.0], [930.0, 0.0], [934.0, 0.0], [932.0, 0.0], [953.0, 0.0], [935.0, 0.0], [938.0, 0.0], [928.0, 0.0], [955.0, 0.0], [958.0, 0.0], [959.0, 0.0], [937.0, 0.0], [939.0, 0.0], [966.0, 0.0], [971.0, 0.0], [981.0, 0.0], [977.0, 0.0], [978.0, 0.0], [980.0, 0.0], [976.0, 0.0], [985.0, 0.0], [986.0, 0.0], [988.0, 0.0], [969.0, 0.0], [963.0, 0.0], [965.0, 0.0], [972.0, 0.0], [1023.0, 0.0], [1009.0, 0.0], [1018.0, 0.0], [993.0, 0.0], [1000.0, 0.0], [1002.0, 0.0], [1003.0, 0.0], [1011.0, 0.0], [1019.0, 0.0], [1037.0, 0.0], [1061.0, 0.0], [1059.0, 0.0], [1047.0, 0.0], [1026.0, 0.0], [1034.0, 0.0], [1053.0, 0.0], [1039.0, 0.0], [1077.0, 0.0], [1074.0, 0.0], [1058.0, 0.0], [1065.0, 0.0], [1071.0, 0.0], [1086.0, 0.0], [1056.0, 0.0], [1087.0, 0.0], [1079.0, 0.0], [1045.0, 0.0], [1042.0, 0.0], [1043.0, 0.0], [1044.0, 0.0], [1119.0, 0.0], [1115.0, 0.0], [1094.0, 0.0], [1091.0, 0.0], [1106.0, 0.0], [1117.0, 0.0], [1126.0, 0.0], [1134.0, 0.0], [1123.0, 0.0], [1145.0, 0.0], [1147.0, 0.0], [1140.0, 0.0], [1139.0, 0.0], [1141.0, 0.0], [1144.0, 0.0], [1121.0, 0.0], [1101.0, 0.0], [1099.0, 0.0], [1100.0, 0.0], [1113.0, 0.0], [1111.0, 0.0], [1107.0, 0.0], [1095.0, 0.0], [1152.0, 0.0], [1169.0, 0.0], [1171.0, 0.0], [1211.0, 0.0], [1198.0, 0.0], [1187.0, 0.0], [1175.0, 0.0], [1174.0, 0.0], [1165.0, 0.0], [1160.0, 0.0], [1205.0, 0.0], [1208.0, 0.0], [1207.0, 0.0], [1180.0, 0.0], [1182.0, 0.0], [1276.0, 0.0], [1261.0, 0.0], [1220.0, 0.0], [1243.0, 0.0], [1249.0, 0.0], [1278.0, 0.0], [1223.0, 0.0], [1230.0, 0.0], [1226.0, 0.0], [1224.0, 0.0], [1260.0, 0.0], [1253.0, 0.0], [1258.0, 0.0], [1272.0, 0.0], [1329.0, 0.0], [1316.0, 0.0], [1317.0, 0.0], [1299.0, 0.0], [1297.0, 0.0], [1333.0, 0.0], [1318.0, 0.0], [1324.0, 0.0], [1341.0, 0.0], [1312.0, 0.0], [1311.0, 0.0], [1286.0, 0.0], [1281.0, 0.0], [1405.0, 0.0], [1356.0, 0.0], [1364.0, 0.0], [1352.0, 0.0], [1350.0, 0.0], [1372.0, 0.0], [1365.0, 0.0], [1347.0, 0.0], [1397.0, 0.0], [1400.0, 0.0], [1381.0, 0.0], [1406.0, 0.0], [1388.0, 0.0], [1382.0, 0.0], [1358.0, 0.0], [1392.0, 0.0], [1362.0, 0.0], [1469.0, 0.0], [1459.0, 0.0], [1447.0, 0.0], [1412.0, 0.0], [1433.0, 0.0], [1429.0, 0.0], [1451.0, 0.0], [1453.0, 0.0], [1468.0, 0.0], [1464.0, 0.0], [1462.0, 0.0], [1420.0, 0.0], [1423.0, 0.0], [1417.0, 0.0], [1441.0, 0.0], [1413.0, 0.0], [1448.0, 0.0], [1522.0, 0.0], [1491.0, 0.0], [1483.0, 0.0], [1531.0, 0.0], [1495.0, 0.0], [1494.0, 0.0], [1529.0, 0.0], [1559.0, 0.0], [1592.0, 0.0], [1562.0, 0.0], [1618.0, 0.0], [1602.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1618.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.6, "minX": 1.72816188E12, "maxY": 984.0333333333333, "series": [{"data": [[1.72816206E12, 909.3], [1.72816188E12, 19.6], [1.72816242E12, 417.18333333333334], [1.72816218E12, 977.4333333333333], [1.728162E12, 783.5166666666667], [1.7281623E12, 923.3833333333333], [1.72816212E12, 959.8333333333334], [1.72816194E12, 324.23333333333335], [1.72816236E12, 848.15], [1.72816224E12, 984.0333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72816242E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72816188E12, "maxY": 526.3166666666667, "series": [{"data": [[1.72816206E12, 460.81666666666666], [1.72816188E12, 19.183333333333334], [1.72816242E12, 293.95], [1.72816218E12, 456.25], [1.728162E12, 452.45], [1.7281623E12, 455.46666666666664], [1.72816248E12, 0.03333333333333333], [1.72816212E12, 454.1], [1.72816194E12, 322.73333333333335], [1.72816236E12, 453.31666666666666], [1.72816224E12, 456.98333333333335], [1.72816254E12, 0.03333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72816206E12, 447.1333333333333], [1.72816242E12, 125.78333333333333], [1.72816218E12, 514.65], [1.728162E12, 329.56666666666666], [1.7281623E12, 471.03333333333336], [1.72816212E12, 509.43333333333334], [1.72816236E12, 396.73333333333335], [1.72816224E12, 526.3166666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.72816242E12, 0.03333333333333333], [1.7281626E12, 0.05], [1.7281623E12, 0.11666666666666667], [1.72816248E12, 0.13333333333333333], [1.72816236E12, 0.2], [1.72816254E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7281626E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72816188E12, "maxY": 526.3166666666667, "series": [{"data": [[1.72816206E12, 447.1333333333333], [1.72816242E12, 125.81666666666666], [1.72816218E12, 514.65], [1.7281626E12, 0.05], [1.728162E12, 329.56666666666666], [1.7281623E12, 471.15], [1.72816248E12, 0.13333333333333333], [1.72816212E12, 509.43333333333334], [1.72816236E12, 396.93333333333334], [1.72816224E12, 526.3166666666667], [1.72816254E12, 0.16666666666666666]], "isOverall": false, "label": "Requisição HTTP-failure", "isController": false}, {"data": [[1.72816206E12, 460.81666666666666], [1.72816188E12, 19.183333333333334], [1.72816242E12, 293.95], [1.72816218E12, 456.25], [1.728162E12, 452.45], [1.7281623E12, 455.46666666666664], [1.72816248E12, 0.03333333333333333], [1.72816212E12, 454.1], [1.72816194E12, 322.73333333333335], [1.72816236E12, 453.31666666666666], [1.72816224E12, 456.98333333333335], [1.72816254E12, 0.03333333333333333]], "isOverall": false, "label": "Requisição HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7281626E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72816188E12, "maxY": 526.3166666666667, "series": [{"data": [[1.72816206E12, 460.81666666666666], [1.72816188E12, 19.183333333333334], [1.72816242E12, 293.95], [1.72816218E12, 456.25], [1.728162E12, 452.45], [1.7281623E12, 455.46666666666664], [1.72816248E12, 0.03333333333333333], [1.72816212E12, 454.1], [1.72816194E12, 322.73333333333335], [1.72816236E12, 453.31666666666666], [1.72816224E12, 456.98333333333335], [1.72816254E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72816206E12, 447.1333333333333], [1.72816242E12, 125.81666666666666], [1.72816218E12, 514.65], [1.7281626E12, 0.05], [1.728162E12, 329.56666666666666], [1.7281623E12, 471.15], [1.72816248E12, 0.13333333333333333], [1.72816212E12, 509.43333333333334], [1.72816236E12, 396.93333333333334], [1.72816224E12, 526.3166666666667], [1.72816254E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7281626E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

